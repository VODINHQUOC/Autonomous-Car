
AutonomousCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800569c  0800569c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800569c  0800569c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080056ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000078  08005724  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005724  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b379  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfa  00000000  00000000  0002b41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017871  00000000  00000000  0002e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c62b  00000000  00000000  00046131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087196  00000000  00000000  0005275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d98f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f4  00000000  00000000  000d9948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080054b4 	.word	0x080054b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080054b4 	.word	0x080054b4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <_ZN15FirstOrderSysIDC1Ev>:
 *      Author: dinh quoc
 */

#include "FirstOrderSysID.h"

FirstOrderSysID::FirstOrderSysID() {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	4a54      	ldr	r2, [pc, #336]	; (8000e6c <_ZN15FirstOrderSysIDC1Ev+0x15c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3314      	adds	r3, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3324      	adds	r3, #36	; 0x24
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3334      	adds	r3, #52	; 0x34
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3344      	adds	r3, #68	; 0x44
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3354      	adds	r3, #84	; 0x54
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3364      	adds	r3, #100	; 0x64
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3374      	adds	r3, #116	; 0x74
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	338c      	adds	r3, #140	; 0x8c
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	339c      	adds	r3, #156	; 0x9c
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	33ac      	adds	r3, #172	; 0xac
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	33bc      	adds	r3, #188	; 0xbc
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	33cc      	adds	r3, #204	; 0xcc
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <_ZN15FirstOrderSysIDC1Ev+0x160>)
 8000dec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	33e0      	adds	r3, #224	; 0xe0
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <_ZN15FirstOrderSysIDC1Ev+0x164>)
 8000e14:	33f8      	adds	r3, #248	; 0xf8
 8000e16:	4611      	mov	r1, r2
 8000e18:	22c8      	movs	r2, #200	; 0xc8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 fada 	bl	80053d4 <memcpy>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <_ZN15FirstOrderSysIDC1Ev+0x168>)
 8000e24:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8000e28:	4611      	mov	r1, r2
 8000e2a:	22c8      	movs	r2, #200	; 0xc8
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fad1 	bl	80053d4 <memcpy>
	// TODO Auto-generated constructor stub
	for (uint8_t i=0;i<50;i++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b31      	cmp	r3, #49	; 0x31
 8000e3a:	d811      	bhi.n	8000e60 <_ZN15FirstOrderSysIDC1Ev+0x150>
	{
		CalTheta(y_ss[i], u_ss[i]);
 8000e3c:	7bfa      	ldrb	r2, [r7, #15]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3270      	adds	r2, #112	; 0x70
 8000e42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	323e      	adds	r2, #62	; 0x3e
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	461a      	mov	r2, r3
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f8cc 	bl	8000ff0 <_ZN15FirstOrderSysID8CalThetaEff>
	for (uint8_t i=0;i<50;i++)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e7ea      	b.n	8000e36 <_ZN15FirstOrderSysIDC1Ev+0x126>
	}

}
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005674 	.word	0x08005674
 8000e70:	3f7eb852 	.word	0x3f7eb852
 8000e74:	080054cc 	.word	0x080054cc
 8000e78:	08005594 	.word	0x08005594

08000e7c <_ZN15FirstOrderSysIDD1Ev>:

FirstOrderSysID::~FirstOrderSysID() {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <_ZN15FirstOrderSysIDD1Ev+0x1c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	08005674 	.word	0x08005674

08000e9c <_ZN15FirstOrderSysIDD0Ev>:
FirstOrderSysID::~FirstOrderSysID() {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
}
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffe9 	bl	8000e7c <_ZN15FirstOrderSysIDD1Ev>
 8000eaa:	f44f 7122 	mov.w	r1, #648	; 0x288
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f004 fa5f 	bl	8005372 <_ZdlPvj>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_>:

void FirstOrderSysID::MatrixDot(uint8_t r1,uint8_t c1, float a[2][2],uint8_t r2,uint8_t c2,float b[2][2],float mult[2][2] )
{
 8000ebe:	b5b0      	push	{r4, r5, r7, lr}
 8000ec0:	b08a      	sub	sp, #40	; 0x28
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	72fb      	strb	r3, [r7, #11]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	72bb      	strb	r3, [r7, #10]
	    // Initializing elements of matrix mult to 0.
    for(int i = 0; i < r1; ++i)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed4:	7afb      	ldrb	r3, [r7, #11]
 8000ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	da17      	bge.n	8000f0c <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0x4e>
    {
    	        for(int j = 0; j < c2; ++j)
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000ee4:	6a3a      	ldr	r2, [r7, #32]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	da0c      	bge.n	8000f04 <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0x46>
        {
            mult[i][j]=0;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ef0:	4413      	add	r3, r2
 8000ef2:	6a3a      	ldr	r2, [r7, #32]
 8000ef4:	f04f 0100 	mov.w	r1, #0
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	        for(int j = 0; j < c2; ++j)
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	3301      	adds	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
 8000f02:	e7ed      	b.n	8000ee0 <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0x22>
    for(int i = 0; i < r1; ++i)
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	3301      	adds	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	e7e3      	b.n	8000ed4 <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0x16>
        }
    }

    // Multiplying matrix a and b and storing in array mult.
    for(int i = 0; i < r1; ++i)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	da4d      	bge.n	8000fb4 <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0xf6>
    {
    	    for(int j = 0; j < c2; ++j)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	da42      	bge.n	8000fac <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0xee>
    	    {
    	    	for(int k = 0; k < c1; ++k)
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	7abb      	ldrb	r3, [r7, #10]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	da38      	bge.n	8000fa4 <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0xe6>
            	{
                	mult[i][j] += a[i][k] * b[k][j]*1.0;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f38:	4413      	add	r3, r2
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fb1d 	bl	8000580 <__aeabi_f2d>
 8000f46:	4604      	mov	r4, r0
 8000f48:	460d      	mov	r5, r1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f5e:	4413      	add	r3, r2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff f8f2 	bl	8000150 <__aeabi_fmul>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fb06 	bl	8000580 <__aeabi_f2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f7ff f9a2 	bl	80002c4 <__adddf3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f8e:	18d4      	adds	r4, r2, r3
 8000f90:	f7ff fd60 	bl	8000a54 <__aeabi_d2f>
 8000f94:	4602      	mov	r2, r0
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    	    	for(int k = 0; k < c1; ++k)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e7c2      	b.n	8000f2a <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0x6c>
    	    for(int j = 0; j < c2; ++j)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	e7b7      	b.n	8000f1c <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0x5e>
    for(int i = 0; i < r1; ++i)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e7ad      	b.n	8000f10 <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_+0x52>
            	}
    	    }

    }

}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}

08000fbc <_ZN15FirstOrderSysID6Mat2x2EPA2_fS1_S1_>:

void FirstOrderSysID::Mat2x2(float a[2][2],float b[2][2],float mult[2][2] )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	MatrixDot(2,2,a,2,2,b,mult);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	9303      	str	r3, [sp, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	2102      	movs	r1, #2
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff6c 	bl	8000ebe <_ZN15FirstOrderSysID9MatrixDotEhhPA2_fhhS1_S1_>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <_ZN15FirstOrderSysID8CalThetaEff>:

void FirstOrderSysID::CalTheta(float y,float u)
{
 8000ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
	if (cntq == 1)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8001004:	2b01      	cmp	r3, #1
 8001006:	d11d      	bne.n	8001044 <_ZN15FirstOrderSysID8CalThetaEff+0x54>
	{
		pre_u=u;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		pre_y=y;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		Pre_P[0][0]=1.0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
		Pre_P[1][1]=1.0;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001026:	661a      	str	r2, [r3, #96]	; 0x60
		Pre_theta[0][0]=0.9;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <_ZN15FirstOrderSysID8CalThetaEff+0x50>)
 800102c:	665a      	str	r2, [r3, #100]	; 0x64
		Pre_theta[1][0]=0.9;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4a03      	ldr	r2, [pc, #12]	; (8001040 <_ZN15FirstOrderSysID8CalThetaEff+0x50>)
 8001032:	66da      	str	r2, [r3, #108]	; 0x6c
		cntq = 2;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2202      	movs	r2, #2
 8001038:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
		pre_u=u;
		pre_y=y;

	}

}
 800103c:	e2f6      	b.n	800162c <_ZN15FirstOrderSysID8CalThetaEff+0x63c>
 800103e:	bf00      	nop
 8001040:	3f666666 	.word	0x3f666666
	else if (cntq > 1)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800104a:	2b01      	cmp	r3, #1
 800104c:	f240 82ee 	bls.w	800162c <_ZN15FirstOrderSysID8CalThetaEff+0x63c>
		Phi[0][0]=-pre_y;    // Phi (k)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	605a      	str	r2, [r3, #4]
		Phi[1][0]=pre_u;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	60da      	str	r2, [r3, #12]
		PhiT[0][0]=-pre_y;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	615a      	str	r2, [r3, #20]
		PhiT[0][1]=pre_u;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	619a      	str	r2, [r3, #24]
		Mat2x2(Phi,PhiT,PPT);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1d19      	adds	r1, r3, #4
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f103 0214 	add.w	r2, r3, #20
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	338c      	adds	r3, #140	; 0x8c
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff ff94 	bl	8000fbc <_ZN15FirstOrderSysID6Mat2x2EPA2_fS1_S1_>
		Mat2x2(PPT,Pre_P,PPT_P);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	339c      	adds	r3, #156	; 0x9c
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff ff89 	bl	8000fbc <_ZN15FirstOrderSysID6Mat2x2EPA2_fS1_S1_>
		Mat2x2(Pre_P,PPT_P,P_PPT_P);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	33ac      	adds	r3, #172	; 0xac
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f7ff ff7e 	bl	8000fbc <_ZN15FirstOrderSysID6Mat2x2EPA2_fS1_S1_>
		Mat2x2(Pre_P,Phi,P_Ph);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1d1a      	adds	r2, r3, #4
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	33bc      	adds	r3, #188	; 0xbc
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff ff74 	bl	8000fbc <_ZN15FirstOrderSysID6Mat2x2EPA2_fS1_S1_>
		Mat2x2(PhiT,P_Ph,PhT_P_Ph);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f103 0114 	add.w	r1, r3, #20
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	33cc      	adds	r3, #204	; 0xcc
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff ff69 	bl	8000fbc <_ZN15FirstOrderSysID6Mat2x2EPA2_fS1_S1_>
		P[0][0]=(1.0/Lamda)*( Pre_P[0][0]-1.0*P_PPT_P[0][0]/( Lamda+PhT_P_Ph[0][0] ) );
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa45 	bl	8000580 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	49cb      	ldr	r1, [pc, #812]	; (800142c <_ZN15FirstOrderSysID8CalThetaEff+0x43c>)
 8001100:	f7ff fbc0 	bl	8000884 <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4692      	mov	sl, r2
 800110a:	469b      	mov	fp, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa35 	bl	8000580 <__aeabi_f2d>
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa2d 	bl	8000580 <__aeabi_f2d>
 8001126:	4680      	mov	r8, r0
 8001128:	4689      	mov	r9, r1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f7ff fce1 	bl	8000b00 <__addsf3>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa1d 	bl	8000580 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4640      	mov	r0, r8
 800114c:	4649      	mov	r1, r9
 800114e:	f7ff fb99 	bl	8000884 <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff f8b1 	bl	80002c0 <__aeabi_dsub>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4650      	mov	r0, sl
 8001164:	4659      	mov	r1, fp
 8001166:	f7ff fa63 	bl	8000630 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fc6f 	bl	8000a54 <__aeabi_d2f>
 8001176:	4602      	mov	r2, r0
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
		P[0][1]=(1.0/Lamda)*( Pre_P[0][1]-1.0*P_PPT_P[0][1]/( Lamda+PhT_P_Ph[0][0] ) );
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9fc 	bl	8000580 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	f04f 0000 	mov.w	r0, #0
 8001190:	49a6      	ldr	r1, [pc, #664]	; (800142c <_ZN15FirstOrderSysID8CalThetaEff+0x43c>)
 8001192:	f7ff fb77 	bl	8000884 <__aeabi_ddiv>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4692      	mov	sl, r2
 800119c:	469b      	mov	fp, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9ec 	bl	8000580 <__aeabi_f2d>
 80011a8:	4604      	mov	r4, r0
 80011aa:	460d      	mov	r5, r1
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9e4 	bl	8000580 <__aeabi_f2d>
 80011b8:	4680      	mov	r8, r0
 80011ba:	4689      	mov	r9, r1
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f7ff fc98 	bl	8000b00 <__addsf3>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9d4 	bl	8000580 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4640      	mov	r0, r8
 80011de:	4649      	mov	r1, r9
 80011e0:	f7ff fb50 	bl	8000884 <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff f868 	bl	80002c0 <__aeabi_dsub>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4650      	mov	r0, sl
 80011f6:	4659      	mov	r1, fp
 80011f8:	f7ff fa1a 	bl	8000630 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc26 	bl	8000a54 <__aeabi_d2f>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
		P[1][0]=(1.0/Lamda)*( Pre_P[1][0]-1.0*P_PPT_P[1][0]/( Lamda+PhT_P_Ph[0][0] ) );
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f9b3 	bl	8000580 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	f04f 0000 	mov.w	r0, #0
 8001222:	4982      	ldr	r1, [pc, #520]	; (800142c <_ZN15FirstOrderSysID8CalThetaEff+0x43c>)
 8001224:	f7ff fb2e 	bl	8000884 <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4692      	mov	sl, r2
 800122e:	469b      	mov	fp, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9a3 	bl	8000580 <__aeabi_f2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f99b 	bl	8000580 <__aeabi_f2d>
 800124a:	4680      	mov	r8, r0
 800124c:	4689      	mov	r9, r1
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f7ff fc4f 	bl	8000b00 <__addsf3>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f98b 	bl	8000580 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4640      	mov	r0, r8
 8001270:	4649      	mov	r1, r9
 8001272:	f7ff fb07 	bl	8000884 <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f81f 	bl	80002c0 <__aeabi_dsub>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4650      	mov	r0, sl
 8001288:	4659      	mov	r1, fp
 800128a:	f7ff f9d1 	bl	8000630 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fbdd 	bl	8000a54 <__aeabi_d2f>
 800129a:	4602      	mov	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c
		P[1][1]=(1.0/Lamda)*( Pre_P[1][1]-1.0*P_PPT_P[1][1]/( Lamda+PhT_P_Ph[0][0] ) );
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f96a 	bl	8000580 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	f04f 0000 	mov.w	r0, #0
 80012b4:	495d      	ldr	r1, [pc, #372]	; (800142c <_ZN15FirstOrderSysID8CalThetaEff+0x43c>)
 80012b6:	f7ff fae5 	bl	8000884 <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4692      	mov	sl, r2
 80012c0:	469b      	mov	fp, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f95a 	bl	8000580 <__aeabi_f2d>
 80012cc:	4604      	mov	r4, r0
 80012ce:	460d      	mov	r5, r1
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f952 	bl	8000580 <__aeabi_f2d>
 80012dc:	4680      	mov	r8, r0
 80012de:	4689      	mov	r9, r1
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f7ff fc06 	bl	8000b00 <__addsf3>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f942 	bl	8000580 <__aeabi_f2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4640      	mov	r0, r8
 8001302:	4649      	mov	r1, r9
 8001304:	f7ff fabe 	bl	8000884 <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7fe ffd6 	bl	80002c0 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4650      	mov	r0, sl
 800131a:	4659      	mov	r1, fp
 800131c:	f7ff f988 	bl	8000630 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fb94 	bl	8000a54 <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
		L[0][0]=1.0*P_Ph[0][0]/( Lamda + PhT_P_Ph[0][0] );
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f921 	bl	8000580 <__aeabi_f2d>
 800133e:	4604      	mov	r4, r0
 8001340:	460d      	mov	r5, r1
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800134e:	4619      	mov	r1, r3
 8001350:	4610      	mov	r0, r2
 8001352:	f7ff fbd5 	bl	8000b00 <__addsf3>
 8001356:	4603      	mov	r3, r0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f911 	bl	8000580 <__aeabi_f2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7ff fa8d 	bl	8000884 <__aeabi_ddiv>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fb6f 	bl	8000a54 <__aeabi_d2f>
 8001376:	4602      	mov	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
		L[0][1]=1.0*P_Ph[0][1]/( Lamda + PhT_P_Ph[0][0] );
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8fc 	bl	8000580 <__aeabi_f2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f7ff fbb0 	bl	8000b00 <__addsf3>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8ec 	bl	8000580 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4620      	mov	r0, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	f7ff fa68 	bl	8000884 <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fb4a 	bl	8000a54 <__aeabi_d2f>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	649a      	str	r2, [r3, #72]	; 0x48
		L[1][0]=1.0*P_Ph[1][0]/( Lamda + PhT_P_Ph[0][0] );
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8d7 	bl	8000580 <__aeabi_f2d>
 80013d2:	4604      	mov	r4, r0
 80013d4:	460d      	mov	r5, r1
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f7ff fb8b 	bl	8000b00 <__addsf3>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f8c7 	bl	8000580 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4620      	mov	r0, r4
 80013f8:	4629      	mov	r1, r5
 80013fa:	f7ff fa43 	bl	8000884 <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fb25 	bl	8000a54 <__aeabi_d2f>
 800140a:	4602      	mov	r2, r0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	64da      	str	r2, [r3, #76]	; 0x4c
		L[1][1]=1.0*P_Ph[1][1]/( Lamda + PhT_P_Ph[0][0] );
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8b2 	bl	8000580 <__aeabi_f2d>
 800141c:	4604      	mov	r4, r0
 800141e:	460d      	mov	r5, r1
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	e002      	b.n	8001430 <_ZN15FirstOrderSysID8CalThetaEff+0x440>
 800142a:	bf00      	nop
 800142c:	3ff00000 	.word	0x3ff00000
 8001430:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f7ff fb62 	bl	8000b00 <__addsf3>
 800143c:	4603      	mov	r3, r0
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f89e 	bl	8000580 <__aeabi_f2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7ff fa1a 	bl	8000884 <__aeabi_ddiv>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fafc 	bl	8000a54 <__aeabi_d2f>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	651a      	str	r2, [r3, #80]	; 0x50
		Mat2x2(PhiT,Pre_theta,PhT_PreTheta);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f103 0114 	add.w	r1, r3, #20
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	33e0      	adds	r3, #224	; 0xe0
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fda2 	bl	8000fbc <_ZN15FirstOrderSysID6Mat2x2EPA2_fS1_S1_>
		epsilon=y-PhT_PreTheta[0][0];
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4619      	mov	r1, r3
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f7ff fb3b 	bl	8000afc <__aeabi_fsub>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		theta[0][0]=Pre_theta[0][0]+1.0*epsilon*L[0][0];
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f873 	bl	8000580 <__aeabi_f2d>
 800149a:	4604      	mov	r4, r0
 800149c:	460d      	mov	r5, r1
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f86b 	bl	8000580 <__aeabi_f2d>
 80014aa:	4680      	mov	r8, r0
 80014ac:	4689      	mov	r9, r1
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f864 	bl	8000580 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4640      	mov	r0, r8
 80014be:	4649      	mov	r1, r9
 80014c0:	f7ff f8b6 	bl	8000630 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7fe fefa 	bl	80002c4 <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fabc 	bl	8000a54 <__aeabi_d2f>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	675a      	str	r2, [r3, #116]	; 0x74
		theta[0][1]=Pre_theta[0][1]+1.0*epsilon*L[0][1];
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f84a 	bl	8000580 <__aeabi_f2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f842 	bl	8000580 <__aeabi_f2d>
 80014fc:	4680      	mov	r8, r0
 80014fe:	4689      	mov	r9, r1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f83b 	bl	8000580 <__aeabi_f2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4640      	mov	r0, r8
 8001510:	4649      	mov	r1, r9
 8001512:	f7ff f88d 	bl	8000630 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fed1 	bl	80002c4 <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fa93 	bl	8000a54 <__aeabi_d2f>
 800152e:	4602      	mov	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	679a      	str	r2, [r3, #120]	; 0x78
		theta[1][0]=Pre_theta[1][0]+1.0*epsilon*L[1][0];
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f821 	bl	8000580 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f819 	bl	8000580 <__aeabi_f2d>
 800154e:	4680      	mov	r8, r0
 8001550:	4689      	mov	r9, r1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f812 	bl	8000580 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7ff f864 	bl	8000630 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7fe fea8 	bl	80002c4 <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fa6a 	bl	8000a54 <__aeabi_d2f>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	67da      	str	r2, [r3, #124]	; 0x7c
		theta[1][1]=Pre_theta[1][1]+1.0*epsilon*L[1][1];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fff8 	bl	8000580 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fff0 	bl	8000580 <__aeabi_f2d>
 80015a0:	4680      	mov	r8, r0
 80015a2:	4689      	mov	r9, r1
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffe9 	bl	8000580 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4640      	mov	r0, r8
 80015b4:	4649      	mov	r1, r9
 80015b6:	f7ff f83b 	bl	8000630 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe fe7f 	bl	80002c4 <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa41 	bl	8000a54 <__aeabi_d2f>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		Pre_P[0][0]=P[0][0];
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
		Pre_P[0][1]=P[1][0];
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
		Pre_P[1][0]=P[0][1];
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c
		Pre_P[1][1]=P[1][1];
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	661a      	str	r2, [r3, #96]	; 0x60
		Pre_theta[0][0]=theta[0][0];
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	665a      	str	r2, [r3, #100]	; 0x64
		Pre_theta[1][0]=theta[1][0];
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	66da      	str	r2, [r3, #108]	; 0x6c
		Pre_theta[0][1]=theta[0][1];
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	669a      	str	r2, [r3, #104]	; 0x68
		Pre_theta[1][1]=theta[1][1];
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	671a      	str	r2, [r3, #112]	; 0x70
		pre_u=u;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		pre_y=y;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001636:	bf00      	nop

08001638 <_ZN15FirstOrderSysID7GetPoleEv>:
float FirstOrderSysID::GetPole(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	return theta[0][0];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <_ZN15FirstOrderSysID7GetZeroEv>:
float FirstOrderSysID::GetZero(void)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	return theta[1][0];
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <_ZN6PIDv10D1Ev>:
	// TODO Auto-generated constructor stub

}


PIDv10::~PIDv10() {
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <_ZN6PIDv10D1Ev+0x1c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	08005684 	.word	0x08005684

08001684 <_ZN6PIDv10D0Ev>:
PIDv10::~PIDv10() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
}
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ffe9 	bl	8001664 <_ZN6PIDv10D1Ev>
 8001692:	2138      	movs	r1, #56	; 0x38
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f003 fe6c 	bl	8005372 <_ZdlPvj>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN6PIDv10C1Effff>:
PIDv10::PIDv10(float Kp,float Ki,float Kd,float Ts) {
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4a24      	ldr	r2, [pc, #144]	; (8001744 <_ZN6PIDv10C1Effff+0xa0>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
	// TODO Auto-generated constructor stub
	this->Kp=Kp;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	61da      	str	r2, [r3, #28]
	this->Ki=Ki;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
	this->Kd=Kd;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	621a      	str	r2, [r3, #32]
	this->Ts=Ts;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	08005684 	.word	0x08005684

08001748 <_ZN6PIDv108PID_InitEv>:
void PIDv10::PID_Init(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	pre_I_Part=0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
	I_part=0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
	D_part=0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
	pre_Error=0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
	Error=0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
	setpoint = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
	feedback=0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
	Output_Vel=0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
	PID=0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
	{
		k++;
	}
}
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxMessage, CanRX_Message); //Receive CAN bus message to canRX buffer
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f001 f930 	bl	8002a18 <HAL_CAN_GetRxMessage>

	if (( (uint8_t)RxMessage.StdId >= 0x60) && ( (uint8_t)RxMessage.StdId <= 0x6F))
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b5f      	cmp	r3, #95	; 0x5f
 80017c0:	d909      	bls.n	80017d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b6f      	cmp	r3, #111	; 0x6f
 80017ca:	d804      	bhi.n	80017d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80017d2:	f001 ff25 	bl	8003620 <HAL_GPIO_TogglePin>

		//=========================================================================================
	}

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200000b4 	.word	0x200000b4
 80017e4:	20000278 	.word	0x20000278
 80017e8:	40011000 	.word	0x40011000

080017ec <HAL_TIM_PeriodElapsedCallback>:
//=======================CAN=======================================
//#define PIDCONTROL
extern void user_main(void);
extern void user_loop(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,Vel_pwm_left);
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,Vel_pwm_right);
#endif

	}
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7a      	ldr	r2, [pc, #488]	; (80019f8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	f040 80e6 	bne.w	80019e0 <HAL_TIM_IC_CaptureCallback+0x1e0>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7f1b      	ldrb	r3, [r3, #28]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d16e      	bne.n	80018fa <HAL_TIM_IC_CaptureCallback+0xfa>
		{
			IC_CNT_LEFT=htim3.Instance->CNT;
 800181c:	4b77      	ldr	r3, [pc, #476]	; (80019fc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	4a77      	ldr	r2, [pc, #476]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001824:	6013      	str	r3, [r2, #0]
			if (IC_CNT_LEFT > IC_PRE_CNT_LEFT)
 8001826:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_TIM_IC_CaptureCallback+0x204>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d91d      	bls.n	800186e <HAL_TIM_IC_CaptureCallback+0x6e>
			{
				frequency_left=1.0/(1.0*( IC_CNT_LEFT - IC_PRE_CNT_LEFT )*0.000001);
 8001832:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe7d 	bl	800053c <__aeabi_ui2d>
 8001842:	a369      	add	r3, pc, #420	; (adr r3, 80019e8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7fe fef2 	bl	8000630 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	496c      	ldr	r1, [pc, #432]	; (8001a08 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001856:	f7ff f815 	bl	8000884 <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f8f7 	bl	8000a54 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	4a68      	ldr	r2, [pc, #416]	; (8001a0c <HAL_TIM_IC_CaptureCallback+0x20c>)
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e025      	b.n	80018ba <HAL_TIM_IC_CaptureCallback+0xba>
			}
			else if (IC_CNT_LEFT < IC_PRE_CNT_LEFT )
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d21f      	bcs.n	80018ba <HAL_TIM_IC_CaptureCallback+0xba>
			{
				frequency_left=1.0/(1.0*( IC_CNT_LEFT + (65535-IC_PRE_CNT_LEFT) )*0.000001);
 800187a:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x200>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_TIM_IC_CaptureCallback+0x204>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001888:	33ff      	adds	r3, #255	; 0xff
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe56 	bl	800053c <__aeabi_ui2d>
 8001890:	a355      	add	r3, pc, #340	; (adr r3, 80019e8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fecb 	bl	8000630 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	f04f 0000 	mov.w	r0, #0
 80018a2:	4959      	ldr	r1, [pc, #356]	; (8001a08 <HAL_TIM_IC_CaptureCallback+0x208>)
 80018a4:	f7fe ffee 	bl	8000884 <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f8d0 	bl	8000a54 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a55      	ldr	r2, [pc, #340]	; (8001a0c <HAL_TIM_IC_CaptureCallback+0x20c>)
 80018b8:	6013      	str	r3, [r2, #0]
			}

			IC_PRE_CNT_LEFT=IC_CNT_LEFT;
 80018ba:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x200>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_TIM_IC_CaptureCallback+0x204>)
 80018c0:	6013      	str	r3, [r2, #0]
			Vel_Feedback_Left=(1.0*frequency_left/374)*60;
 80018c2:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <HAL_TIM_IC_CaptureCallback+0x20c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe5a 	bl	8000580 <__aeabi_f2d>
 80018cc:	a348      	add	r3, pc, #288	; (adr r3, 80019f0 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe ffd7 	bl	8000884 <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x210>)
 80018e4:	f7fe fea4 	bl	8000630 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f8b0 	bl	8000a54 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x214>)
 80018f8:	6013      	str	r3, [r2, #0]
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7f1b      	ldrb	r3, [r3, #28]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d16e      	bne.n	80019e0 <HAL_TIM_IC_CaptureCallback+0x1e0>
		{
			IC_CNT_RIGHT=htim3.Instance->CNT;
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	4a43      	ldr	r2, [pc, #268]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x218>)
 800190a:	6013      	str	r3, [r2, #0]
			if (IC_CNT_RIGHT > IC_PRE_CNT_RIGHT)
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x218>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d91d      	bls.n	8001954 <HAL_TIM_IC_CaptureCallback+0x154>
			{
				frequency_right=1.0/(1.0*( IC_CNT_RIGHT - IC_PRE_CNT_RIGHT )*0.000001);
 8001918:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x218>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x21c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe0a 	bl	800053c <__aeabi_ui2d>
 8001928:	a32f      	add	r3, pc, #188	; (adr r3, 80019e8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fe7f 	bl	8000630 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	4933      	ldr	r1, [pc, #204]	; (8001a08 <HAL_TIM_IC_CaptureCallback+0x208>)
 800193c:	f7fe ffa2 	bl	8000884 <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f884 	bl	8000a54 <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	4a34      	ldr	r2, [pc, #208]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e025      	b.n	80019a0 <HAL_TIM_IC_CaptureCallback+0x1a0>
			}
			else if (IC_CNT_RIGHT < IC_PRE_CNT_RIGHT )
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x21c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d21f      	bcs.n	80019a0 <HAL_TIM_IC_CaptureCallback+0x1a0>
			{
				frequency_right=1.0/(1.0*( IC_CNT_RIGHT + (65535-IC_PRE_CNT_RIGHT) )*0.000001);
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800196e:	33ff      	adds	r3, #255	; 0xff
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fde3 	bl	800053c <__aeabi_ui2d>
 8001976:	a31c      	add	r3, pc, #112	; (adr r3, 80019e8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fe58 	bl	8000630 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	491f      	ldr	r1, [pc, #124]	; (8001a08 <HAL_TIM_IC_CaptureCallback+0x208>)
 800198a:	f7fe ff7b 	bl	8000884 <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff f85d 	bl	8000a54 <__aeabi_d2f>
 800199a:	4603      	mov	r3, r0
 800199c:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x220>)
 800199e:	6013      	str	r3, [r2, #0]
			}

			IC_PRE_CNT_RIGHT=IC_CNT_RIGHT;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x218>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x21c>)
 80019a6:	6013      	str	r3, [r2, #0]
			Vel_Feedback_Right=(1.0*frequency_right/374)*60;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x220>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fde7 	bl	8000580 <__aeabi_f2d>
 80019b2:	a30f      	add	r3, pc, #60	; (adr r3, 80019f0 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe ff64 	bl	8000884 <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x210>)
 80019ca:	f7fe fe31 	bl	8000630 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f83d 	bl	8000a54 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x224>)
 80019de:	6013      	str	r3, [r2, #0]

		}
	}
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80019ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40776000 	.word	0x40776000
 80019f8:	40000400 	.word	0x40000400
 80019fc:	20000188 	.word	0x20000188
 8001a00:	200000a4 	.word	0x200000a4
 8001a04:	200000a8 	.word	0x200000a8
 8001a08:	3ff00000 	.word	0x3ff00000
 8001a0c:	2000009c 	.word	0x2000009c
 8001a10:	404e0000 	.word	0x404e0000
 8001a14:	20000094 	.word	0x20000094
 8001a18:	200000ac 	.word	0x200000ac
 8001a1c:	200000b0 	.word	0x200000b0
 8001a20:	200000a0 	.word	0x200000a0
 8001a24:	20000098 	.word	0x20000098

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2c:	f000 fd8a 	bl	8002544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a30:	f000 f846 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a34:	f000 faa6 	bl	8001f84 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a38:	f000 f900 	bl	8001c3c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001a3c:	f000 fa0e 	bl	8001e5c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001a40:	f000 f9c0 	bl	8001dc4 <MX_TIM2_Init>
  MX_CAN_Init();
 8001a44:	f000 f882 	bl	8001b4c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001a48:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <main+0x88>)
 8001a4a:	f002 fa3b 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4818      	ldr	r0, [pc, #96]	; (8001ab4 <main+0x8c>)
 8001a52:	f002 fae1 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a56:	2104      	movs	r1, #4
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <main+0x8c>)
 8001a5a:	f002 fadd 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a5e:	2108      	movs	r1, #8
 8001a60:	4814      	ldr	r0, [pc, #80]	; (8001ab4 <main+0x8c>)
 8001a62:	f002 fad9 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a66:	210c      	movs	r1, #12
 8001a68:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <main+0x8c>)
 8001a6a:	f002 fad5 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <main+0x90>)
 8001a72:	f002 fbcb 	bl	800420c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001a76:	2104      	movs	r1, #4
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <main+0x90>)
 8001a7a:	f002 fbc7 	bl	800420c <HAL_TIM_IC_Start_IT>


  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0);
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <main+0x8c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <main+0x8c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,0);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <main+0x8c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0);
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <main+0x8c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
  user_main();
 8001a9e:	f000 fae5 	bl	800206c <user_main>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2108      	movs	r1, #8
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <main+0x94>)
 8001aa8:	f001 fda2 	bl	80035f0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <main+0x84>
 8001aae:	bf00      	nop
 8001ab0:	20000218 	.word	0x20000218
 8001ab4:	200001d0 	.word	0x200001d0
 8001ab8:	20000188 	.word	0x20000188
 8001abc:	40010800 	.word	0x40010800

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b090      	sub	sp, #64	; 0x40
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	2228      	movs	r2, #40	; 0x28
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fc8e 	bl	80053f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001afe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fda3 	bl	8003654 <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b14:	f000 faa4 	bl	8002060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2102      	movs	r1, #2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 f80e 	bl	8003b54 <HAL_RCC_ClockConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b3e:	f000 fa8f 	bl	8002060 <Error_Handler>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3740      	adds	r7, #64	; 0x40
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b52:	4a36      	ldr	r2, [pc, #216]	; (8001c2c <MX_CAN_Init+0xe0>)
 8001b54:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001b56:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b58:	2202      	movs	r2, #2
 8001b5a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b6a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001b6e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b72:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b76:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b9c:	4822      	ldr	r0, [pc, #136]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001b9e:	f000 fd33 	bl	8002608 <HAL_CAN_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001ba8:	f000 fa5a 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  hcanfilter.FilterActivation=CAN_FILTER_ENABLE;
 8001bac:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	621a      	str	r2, [r3, #32]

  hcanfilter.FilterMode=CAN_FILTERMODE_IDMASK;
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]

  hcanfilter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	61da      	str	r2, [r3, #28]

  hcanfilter.FilterMaskIdHigh=((filter_mask << 5)  | (filter_mask >> (32 - 5))) & 0xFFFF;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_CAN_Init+0xe8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bca:	6093      	str	r3, [r2, #8]

  hcanfilter.FilterMaskIdLow =(filter_mask >> (11 - 3)) & 0xFFF8;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_CAN_Init+0xe8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0a1a      	lsrs	r2, r3, #8
 8001bd2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bda:	60d3      	str	r3, [r2, #12]

  hcanfilter.FilterBank=12;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]

  hcanfilter.FilterIdHigh=((filter_id << 5)|(filter_id >> (32 - 5))) & 0xFFFF;// STID[10:0] & EXTID[17:13];
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_CAN_Init+0xec>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bee:	6013      	str	r3, [r2, #0]

  hcanfilter.FilterIdLow =(filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_CAN_Init+0xec>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0a1a      	lsrs	r2, r3, #8
 8001bf6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001bfe:	6053      	str	r3, [r2, #4]

  hcanfilter.FilterFIFOAssignment=CAN_FILTER_FIFO1;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	611a      	str	r2, [r3, #16]
  hcanfilter.SlaveStartFilterBank=14;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001c08:	220e      	movs	r2, #14
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan,&hcanfilter); //Initialize CAN Filter
 8001c0c:	4908      	ldr	r1, [pc, #32]	; (8001c30 <MX_CAN_Init+0xe4>)
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001c10:	f000 fdf5 	bl	80027fe <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan); //Initialize CAN Bus
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001c16:	f000 febb 	bl	8002990 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO1_MSG_PENDING);// Initialize
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <MX_CAN_Init+0xdc>)
 8001c1e:	f001 f80c 	bl	8002c3a <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000160 	.word	0x20000160
 8001c2c:	40006400 	.word	0x40006400
 8001c30:	20000138 	.word	0x20000138
 8001c34:	20000004 	.word	0x20000004
 8001c38:	20000000 	.word	0x20000000

08001c3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b096      	sub	sp, #88	; 0x58
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2220      	movs	r2, #32
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fbbb 	bl	80053f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c7a:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001c7c:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <MX_TIM1_Init+0x184>)
 8001c7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001c82:	2248      	movs	r2, #72	; 0x48
 8001c84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c86:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001c8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c9a:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ca6:	4845      	ldr	r0, [pc, #276]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001ca8:	f002 f8bc 	bl	8003e24 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001cb2:	f000 f9d5 	bl	8002060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	483e      	ldr	r0, [pc, #248]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001cc4:	f002 fe02 	bl	80048cc <HAL_TIM_ConfigClockSource>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cce:	f000 f9c7 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cd2:	483a      	ldr	r0, [pc, #232]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001cd4:	f002 f948 	bl	8003f68 <HAL_TIM_PWM_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001cde:	f000 f9bf 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4832      	ldr	r0, [pc, #200]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001cf2:	f003 fa7d 	bl	80051f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001cfc:	f000 f9b0 	bl	8002060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4825      	ldr	r0, [pc, #148]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001d26:	f002 fd13 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d30:	f000 f996 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	481f      	ldr	r0, [pc, #124]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001d3e:	f002 fd07 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001d48:	f000 f98a 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	2208      	movs	r2, #8
 8001d52:	4619      	mov	r1, r3
 8001d54:	4819      	ldr	r0, [pc, #100]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001d56:	f002 fcfb 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d60:	f000 f97e 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	220c      	movs	r2, #12
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4813      	ldr	r0, [pc, #76]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001d6e:	f002 fcef 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001d78:	f000 f972 	bl	8002060 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001da0:	f003 fa84 	bl	80052ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001daa:	f000 f959 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dae:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM1_Init+0x180>)
 8001db0:	f000 fb0e 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3758      	adds	r7, #88	; 0x58
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200001d0 	.word	0x200001d0
 8001dc0:	40012c00 	.word	0x40012c00

08001dc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001dea:	2248      	movs	r2, #72	; 0x48
 8001dec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e08:	4813      	ldr	r0, [pc, #76]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001e0a:	f002 f80b 	bl	8003e24 <HAL_TIM_Base_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e14:	f000 f924 	bl	8002060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4619      	mov	r1, r3
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001e26:	f002 fd51 	bl	80048cc <HAL_TIM_ConfigClockSource>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e30:	f000 f916 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_TIM2_Init+0x94>)
 8001e42:	f003 f9d5 	bl	80051f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e4c:	f000 f908 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000218 	.word	0x20000218

08001e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0318 	add.w	r3, r7, #24
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001e88:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <MX_TIM3_Init+0x124>)
 8001e8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001e8e:	2248      	movs	r2, #72	; 0x48
 8001e90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e92:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e98:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eac:	4833      	ldr	r0, [pc, #204]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001eae:	f001 ffb9 	bl	8003e24 <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001eb8:	f000 f8d2 	bl	8002060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	482c      	ldr	r0, [pc, #176]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001eca:	f002 fcff 	bl	80048cc <HAL_TIM_ConfigClockSource>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ed4:	f000 f8c4 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ed8:	4828      	ldr	r0, [pc, #160]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001eda:	f002 f93f 	bl	800415c <HAL_TIM_IC_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ee4:	f000 f8bc 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4821      	ldr	r0, [pc, #132]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001ef8:	f003 f97a 	bl	80051f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001f02:	f000 f8ad 	bl	8002060 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 10;
 8001f12:	230a      	movs	r3, #10
 8001f14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4817      	ldr	r0, [pc, #92]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001f1e:	f002 fb83 	bl	8004628 <HAL_TIM_IC_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001f28:	f000 f89a 	bl	8002060 <Error_Handler>
  }
  sConfigIC.ICFilter = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	2204      	movs	r2, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4811      	ldr	r0, [pc, #68]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001f38:	f002 fb76 	bl	8004628 <HAL_TIM_IC_ConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001f42:	f000 f88d 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f46:	463b      	mov	r3, r7
 8001f48:	2208      	movs	r2, #8
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001f4e:	f002 fb6b 	bl	8004628 <HAL_TIM_IC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001f58:	f000 f882 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_TIM3_Init+0x120>)
 8001f64:	f002 fb60 	bl	8004628 <HAL_TIM_IC_ConfigChannel>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001f6e:	f000 f877 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000188 	.word	0x20000188
 8001f80:	40000400 	.word	0x40000400

08001f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fb6:	f043 0320 	orr.w	r3, r3, #32
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <MX_GPIO_Init+0xd0>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffe:	4816      	ldr	r0, [pc, #88]	; (8002058 <MX_GPIO_Init+0xd4>)
 8002000:	f001 faf6 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_12, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	f241 0108 	movw	r1, #4104	; 0x1008
 800200a:	4814      	ldr	r0, [pc, #80]	; (800205c <MX_GPIO_Init+0xd8>)
 800200c:	f001 faf0 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800201a:	2301      	movs	r3, #1
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	4619      	mov	r1, r3
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <MX_GPIO_Init+0xd4>)
 800202a:	f001 f95d 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12;
 800202e:	f241 0308 	movw	r3, #4104	; 0x1008
 8002032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002038:	2301      	movs	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_GPIO_Init+0xd8>)
 8002048:	f001 f94e 	bl	80032e8 <HAL_GPIO_Init>

}
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	40011000 	.word	0x40011000
 800205c:	40010800 	.word	0x40010800

08002060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002068:	e7fe      	b.n	8002068 <Error_Handler+0x8>
	...

0800206c <user_main>:
PIDv10 pidRight(0.1,0,0,0.001);
float zero=0.0;
float pole=0.0;

void user_main(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002072:	af00      	add	r7, sp, #0
 pidLeft.PID_Init();
 8002074:	4810      	ldr	r0, [pc, #64]	; (80020b8 <user_main+0x4c>)
 8002076:	f7ff fb67 	bl	8001748 <_ZN6PIDv108PID_InitEv>
 pidRight.PID_Init();
 800207a:	4810      	ldr	r0, [pc, #64]	; (80020bc <user_main+0x50>)
 800207c:	f7ff fb64 	bl	8001748 <_ZN6PIDv108PID_InitEv>
 FirstOrderSysID sysid;
 8002080:	463b      	mov	r3, r7
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fe44 	bl	8000d10 <_ZN15FirstOrderSysIDC1Ev>
 pole=sysid.GetPole();
 8002088:	463b      	mov	r3, r7
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fad4 	bl	8001638 <_ZN15FirstOrderSysID7GetPoleEv>
 8002090:	4603      	mov	r3, r0
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <user_main+0x54>)
 8002094:	6013      	str	r3, [r2, #0]
 zero=sysid.GetZero();
 8002096:	463b      	mov	r3, r7
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fad8 	bl	800164e <_ZN15FirstOrderSysID7GetZeroEv>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <user_main+0x58>)
 80020a2:	6013      	str	r3, [r2, #0]
 FirstOrderSysID sysid;
 80020a4:	463b      	mov	r3, r7
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fee8 	bl	8000e7c <_ZN15FirstOrderSysIDD1Ev>


}
 80020ac:	bf00      	nop
 80020ae:	f507 7722 	add.w	r7, r7, #648	; 0x288
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000bc 	.word	0x200000bc
 80020bc:	200000f4 	.word	0x200000f4
 80020c0:	20000130 	.word	0x20000130
 80020c4:	2000012c 	.word	0x2000012c

080020c8 <_Z41__static_initialization_and_destruction_0ii>:
	Vel_pwm_right=pidRight.PID_GetVelocity();

}

#ifdef __cplusplus
}
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d118      	bne.n	800210a <_Z41__static_initialization_and_destruction_0ii+0x42>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020de:	4293      	cmp	r3, r2
 80020e0:	d113      	bne.n	800210a <_Z41__static_initialization_and_destruction_0ii+0x42>
PIDv10 pidLeft(0.1,0,0,0.001);
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4911      	ldr	r1, [pc, #68]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80020f0:	4811      	ldr	r0, [pc, #68]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80020f2:	f7ff fad7 	bl	80016a4 <_ZN6PIDv10C1Effff>
PIDv10 pidRight(0.1,0,0,0.001);
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	490c      	ldr	r1, [pc, #48]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002106:	f7ff facd 	bl	80016a4 <_ZN6PIDv10C1Effff>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002116:	4293      	cmp	r3, r2
 8002118:	d105      	bne.n	8002126 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800211c:	f7ff faa2 	bl	8001664 <_ZN6PIDv10D1Ev>
PIDv10 pidLeft(0.1,0,0,0.001);
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002122:	f7ff fa9f 	bl	8001664 <_ZN6PIDv10D1Ev>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	3a83126f 	.word	0x3a83126f
 8002134:	3dcccccd 	.word	0x3dcccccd
 8002138:	200000bc 	.word	0x200000bc
 800213c:	200000f4 	.word	0x200000f4

08002140 <_GLOBAL__sub_I_pidLeft>:
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
 8002144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff ffbd 	bl	80020c8 <_Z41__static_initialization_and_destruction_0ii>
 800214e:	bd80      	pop	{r7, pc}

08002150 <_GLOBAL__sub_D_pidLeft>:
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
 8002154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff ffb5 	bl	80020c8 <_Z41__static_initialization_and_destruction_0ii>
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_MspInit+0x5c>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_MspInit+0x5c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6193      	str	r3, [r2, #24]
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_MspInit+0x5c>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_MspInit+0x5c>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_MspInit+0x5c>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_MspInit+0x5c>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_MspInit+0x60>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_MspInit+0x60>)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000

080021c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a29      	ldr	r2, [pc, #164]	; (8002284 <HAL_CAN_MspInit+0xc0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d14b      	bne.n	800227c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HAL_CAN_MspInit+0xc4>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <HAL_CAN_MspInit+0xc4>)
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ee:	61d3      	str	r3, [r2, #28]
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_CAN_MspInit+0xc4>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_CAN_MspInit+0xc4>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <HAL_CAN_MspInit+0xc4>)
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_CAN_MspInit+0xc4>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4818      	ldr	r0, [pc, #96]	; (800228c <HAL_CAN_MspInit+0xc8>)
 800222a:	f001 f85d 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800222e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	4812      	ldr	r0, [pc, #72]	; (800228c <HAL_CAN_MspInit+0xc8>)
 8002244:	f001 f850 	bl	80032e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_CAN_MspInit+0xcc>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_CAN_MspInit+0xcc>)
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	2015      	movs	r0, #21
 8002272:	f001 f802 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002276:	2015      	movs	r0, #21
 8002278:	f001 f81b 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40006400 	.word	0x40006400
 8002288:	40021000 	.word	0x40021000
 800228c:	40010c00 	.word	0x40010c00
 8002290:	40010000 	.word	0x40010000

08002294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0320 	add.w	r3, r7, #32
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a43      	ldr	r2, [pc, #268]	; (80023bc <HAL_TIM_Base_MspInit+0x128>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d11c      	bne.n	80022ee <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022b4:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a41      	ldr	r2, [pc, #260]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 80022ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2019      	movs	r0, #25
 80022d2:	f000 ffd2 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022d6:	2019      	movs	r0, #25
 80022d8:	f000 ffeb 	bl	80032b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	201b      	movs	r0, #27
 80022e2:	f000 ffca 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022e6:	201b      	movs	r0, #27
 80022e8:	f000 ffe3 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ec:	e062      	b.n	80023b4 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d114      	bne.n	8002322 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	61d3      	str	r3, [r2, #28]
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	201c      	movs	r0, #28
 8002316:	f000 ffb0 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800231a:	201c      	movs	r0, #28
 800231c:	f000 ffc9 	bl	80032b2 <HAL_NVIC_EnableIRQ>
}
 8002320:	e048      	b.n	80023b4 <HAL_TIM_Base_MspInit+0x120>
  else if(htim_base->Instance==TIM3)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_TIM_Base_MspInit+0x130>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d143      	bne.n	80023b4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a23      	ldr	r2, [pc, #140]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	61d3      	str	r3, [r2, #28]
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_TIM_Base_MspInit+0x12c>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002374:	23c0      	movs	r3, #192	; 0xc0
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 0320 	add.w	r3, r7, #32
 8002384:	4619      	mov	r1, r3
 8002386:	4810      	ldr	r0, [pc, #64]	; (80023c8 <HAL_TIM_Base_MspInit+0x134>)
 8002388:	f000 ffae 	bl	80032e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800238c:	2303      	movs	r3, #3
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	f107 0320 	add.w	r3, r7, #32
 800239c:	4619      	mov	r1, r3
 800239e:	480b      	ldr	r0, [pc, #44]	; (80023cc <HAL_TIM_Base_MspInit+0x138>)
 80023a0:	f000 ffa2 	bl	80032e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	201d      	movs	r0, #29
 80023aa:	f000 ff66 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ae:	201d      	movs	r0, #29
 80023b0:	f000 ff7f 	bl	80032b2 <HAL_NVIC_EnableIRQ>
}
 80023b4:	bf00      	nop
 80023b6:	3730      	adds	r7, #48	; 0x30
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00

080023d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_TIM_MspPostInit+0x5c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d118      	bne.n	8002422 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_TIM_MspPostInit+0x60>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_TIM_MspPostInit+0x60>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_TIM_MspPostInit+0x60>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002408:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800240c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	4619      	mov	r1, r3
 800241c:	4805      	ldr	r0, [pc, #20]	; (8002434 <HAL_TIM_MspPostInit+0x64>)
 800241e:	f000 ff63 	bl	80032e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40010800 	.word	0x40010800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247e:	f000 f8a7 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <CAN1_RX1_IRQHandler+0x10>)
 800248e:	f000 fbf9 	bl	8002c84 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000160 	.word	0x20000160

0800249c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM1_UP_IRQHandler+0x10>)
 80024a2:	f001 ffb9 	bl	8004418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200001d0 	.word	0x200001d0

080024b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM1_CC_IRQHandler+0x10>)
 80024b6:	f001 ffaf 	bl	8004418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200001d0 	.word	0x200001d0

080024c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM2_IRQHandler+0x10>)
 80024ca:	f001 ffa5 	bl	8004418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000218 	.word	0x20000218

080024d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM3_IRQHandler+0x10>)
 80024de:	f001 ff9b 	bl	8004418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000188 	.word	0x20000188

080024ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024fa:	e003      	b.n	8002504 <LoopCopyDataInit>

080024fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002500:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002502:	3104      	adds	r1, #4

08002504 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002504:	480a      	ldr	r0, [pc, #40]	; (8002530 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002508:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800250a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800250c:	d3f6      	bcc.n	80024fc <CopyDataInit>
  ldr r2, =_sbss
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002510:	e002      	b.n	8002518 <LoopFillZerobss>

08002512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002514:	f842 3b04 	str.w	r3, [r2], #4

08002518 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800251a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800251c:	d3f9      	bcc.n	8002512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800251e:	f7ff ffe5 	bl	80024ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002522:	f002 ff2b 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002526:	f7ff fa7f 	bl	8001a28 <main>
  bx lr
 800252a:	4770      	bx	lr
  ldr r3, =_sidata
 800252c:	080056ac 	.word	0x080056ac
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002534:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002538:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800253c:	200002a4 	.word	0x200002a4

08002540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC1_2_IRQHandler>
	...

08002544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_Init+0x28>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_Init+0x28>)
 800254e:	f043 0310 	orr.w	r3, r3, #16
 8002552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002554:	2003      	movs	r0, #3
 8002556:	f000 fe85 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255a:	2000      	movs	r0, #0
 800255c:	f000 f808 	bl	8002570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002560:	f7ff fdfe 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40022000 	.word	0x40022000

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x54>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x58>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fe9d 	bl	80032ce <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d80a      	bhi.n	80025ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f000 fe65 	bl	800327a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_InitTick+0x5c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000010 	.word	0x20000010
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x1c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_IncTick+0x20>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <HAL_IncTick+0x20>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000010 	.word	0x20000010
 80025f0:	20000294 	.word	0x20000294

080025f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_GetTick+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000294 	.word	0x20000294

08002608 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0ed      	b.n	80027f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fdcc 	bl	80021c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0202 	bic.w	r2, r2, #2
 800263a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800263c:	f7ff ffda 	bl	80025f4 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002642:	e012      	b.n	800266a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002644:	f7ff ffd6 	bl	80025f4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b0a      	cmp	r3, #10
 8002650:	d90b      	bls.n	800266a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2205      	movs	r2, #5
 8002662:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0c5      	b.n	80027f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e5      	bne.n	8002644 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002688:	f7ff ffb4 	bl	80025f4 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800268e:	e012      	b.n	80026b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002690:	f7ff ffb0 	bl	80025f4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b0a      	cmp	r3, #10
 800269c:	d90b      	bls.n	80026b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2205      	movs	r2, #5
 80026ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e09f      	b.n	80027f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0e5      	beq.n	8002690 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7e1b      	ldrb	r3, [r3, #24]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d108      	bne.n	80026de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e007      	b.n	80026ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7e5b      	ldrb	r3, [r3, #25]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d108      	bne.n	8002708 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e007      	b.n	8002718 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002716:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7e9b      	ldrb	r3, [r3, #26]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d108      	bne.n	8002732 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e007      	b.n	8002742 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0220 	bic.w	r2, r2, #32
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7edb      	ldrb	r3, [r3, #27]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0210 	bic.w	r2, r2, #16
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e007      	b.n	800276c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0210 	orr.w	r2, r2, #16
 800276a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7f1b      	ldrb	r3, [r3, #28]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d108      	bne.n	8002786 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0208 	orr.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e007      	b.n	8002796 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0208 	bic.w	r2, r2, #8
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7f5b      	ldrb	r3, [r3, #29]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d108      	bne.n	80027b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0204 	orr.w	r2, r2, #4
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e007      	b.n	80027c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0204 	bic.w	r2, r2, #4
 80027be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	ea42 0103 	orr.w	r1, r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80027fe:	b480      	push	{r7}
 8002800:	b087      	sub	sp, #28
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002814:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d003      	beq.n	8002824 <HAL_CAN_ConfigFilter+0x26>
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	2b02      	cmp	r3, #2
 8002820:	f040 80aa 	bne.w	8002978 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	2201      	movs	r2, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d123      	bne.n	80028a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	401a      	ands	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002880:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3248      	adds	r2, #72	; 0x48
 8002886:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800289a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800289c:	6979      	ldr	r1, [r7, #20]
 800289e:	3348      	adds	r3, #72	; 0x48
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d122      	bne.n	80028f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3248      	adds	r2, #72	; 0x48
 80028d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ea:	6979      	ldr	r1, [r7, #20]
 80028ec:	3348      	adds	r3, #72	; 0x48
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800290e:	e007      	b.n	8002920 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800293a:	e007      	b.n	800294c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	431a      	orrs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d107      	bne.n	8002964 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e006      	b.n	8002986 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d12e      	bne.n	8002a02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029bc:	f7ff fe1a 	bl	80025f4 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029c2:	e012      	b.n	80029ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029c4:	f7ff fe16 	bl	80025f4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b0a      	cmp	r3, #10
 80029d0:	d90b      	bls.n	80029ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2205      	movs	r2, #5
 80029e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e012      	b.n	8002a10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e5      	bne.n	80029c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e006      	b.n	8002a10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d003      	beq.n	8002a3c <HAL_CAN_GetRxMessage+0x24>
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	f040 80f3 	bne.w	8002c22 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10e      	bne.n	8002a60 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d116      	bne.n	8002a7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0e7      	b.n	8002c30 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0d8      	b.n	8002c30 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	331b      	adds	r3, #27
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0204 	and.w	r2, r3, #4
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	331b      	adds	r3, #27
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0d5b      	lsrs	r3, r3, #21
 8002aac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e00b      	b.n	8002ace <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	331b      	adds	r3, #27
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	4413      	add	r3, r2
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0202 	and.w	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	331b      	adds	r3, #27
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 020f 	and.w	r2, r3, #15
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	331b      	adds	r3, #27
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	3304      	adds	r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	331b      	adds	r3, #27
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0c1b      	lsrs	r3, r3, #16
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0a1a      	lsrs	r2, r3, #8
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0c1a      	lsrs	r2, r3, #16
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	3302      	adds	r3, #2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e1a      	lsrs	r2, r3, #24
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0a1a      	lsrs	r2, r3, #8
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	3305      	adds	r3, #5
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0c1a      	lsrs	r2, r3, #16
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3306      	adds	r3, #6
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e1a      	lsrs	r2, r3, #24
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	3307      	adds	r3, #7
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d108      	bne.n	8002c0e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	e007      	b.n	8002c1e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e006      	b.n	8002c30 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d002      	beq.n	8002c58 <HAL_CAN_ActivateNotification+0x1e>
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d109      	bne.n	8002c6c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6959      	ldr	r1, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e006      	b.n	8002c7a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d07c      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d023      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f983 	bl	8002ff2 <HAL_CAN_TxMailbox0CompleteCallback>
 8002cec:	e016      	b.n	8002d1c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	e00c      	b.n	8002d1c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	e002      	b.n	8002d1c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f986 	bl	8003028 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d024      	beq.n	8002d70 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f962 	bl	8003004 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d40:	e016      	b.n	8002d70 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
 8002d54:	e00c      	b.n	8002d70 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	e002      	b.n	8002d70 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f965 	bl	800303a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d024      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f941 	bl	8003016 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d94:	e016      	b.n	8002dc4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
 8002da8:	e00c      	b.n	8002dc4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbc:	e002      	b.n	8002dc4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f944 	bl	800304c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2210      	movs	r2, #16
 8002de6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2208      	movs	r2, #8
 8002e02:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f933 	bl	8003070 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f91b 	bl	800305e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2208      	movs	r2, #8
 8002e66:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f90a 	bl	8003082 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fc8c 	bl	80017a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f8f3 	bl	8003094 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8eb 	bl	80030a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d07b      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d072      	beq.n	8002fca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d043      	beq.n	8002fca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03e      	beq.n	8002fca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f52:	2b60      	cmp	r3, #96	; 0x60
 8002f54:	d02b      	beq.n	8002fae <HAL_CAN_IRQHandler+0x32a>
 8002f56:	2b60      	cmp	r3, #96	; 0x60
 8002f58:	d82e      	bhi.n	8002fb8 <HAL_CAN_IRQHandler+0x334>
 8002f5a:	2b50      	cmp	r3, #80	; 0x50
 8002f5c:	d022      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x320>
 8002f5e:	2b50      	cmp	r3, #80	; 0x50
 8002f60:	d82a      	bhi.n	8002fb8 <HAL_CAN_IRQHandler+0x334>
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d019      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x316>
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d826      	bhi.n	8002fb8 <HAL_CAN_IRQHandler+0x334>
 8002f6a:	2b30      	cmp	r3, #48	; 0x30
 8002f6c:	d010      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x30c>
 8002f6e:	2b30      	cmp	r3, #48	; 0x30
 8002f70:	d822      	bhi.n	8002fb8 <HAL_CAN_IRQHandler+0x334>
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d002      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x2f8>
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d005      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f7a:	e01d      	b.n	8002fb8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f043 0308 	orr.w	r3, r3, #8
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f84:	e019      	b.n	8002fba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	f043 0310 	orr.w	r3, r3, #16
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f8e:	e014      	b.n	8002fba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f98:	e00f      	b.n	8002fba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fa2:	e00a      	b.n	8002fba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fac:	e005      	b.n	8002fba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fb6:	e000      	b.n	8002fba <HAL_CAN_IRQHandler+0x336>
            break;
 8002fb8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fc8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f867 	bl	80030b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002fea:	bf00      	nop
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
	...

080030cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	60d3      	str	r3, [r2, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <__NVIC_GetPriorityGrouping+0x18>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 0307 	and.w	r3, r3, #7
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db0b      	blt.n	800315a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	4906      	ldr	r1, [pc, #24]	; (8003164 <__NVIC_EnableIRQ+0x34>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2001      	movs	r0, #1
 8003152:	fa00 f202 	lsl.w	r2, r0, r2
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100

08003168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	2b00      	cmp	r3, #0
 800317a:	db0a      	blt.n	8003192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	490c      	ldr	r1, [pc, #48]	; (80031b4 <__NVIC_SetPriority+0x4c>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	440b      	add	r3, r1
 800318c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003190:	e00a      	b.n	80031a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <__NVIC_SetPriority+0x50>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3b04      	subs	r3, #4
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	761a      	strb	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf28      	it	cs
 80031da:	2304      	movcs	r3, #4
 80031dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <NVIC_EncodePriority+0x30>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3b03      	subs	r3, #3
 80031ea:	e000      	b.n	80031ee <NVIC_EncodePriority+0x32>
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	401a      	ands	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003204:	f04f 31ff 	mov.w	r1, #4294967295
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43d9      	mvns	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	4313      	orrs	r3, r2
         );
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003230:	d301      	bcc.n	8003236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <SysTick_Config+0x40>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323e:	210f      	movs	r1, #15
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f7ff ff90 	bl	8003168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <SysTick_Config+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <SysTick_Config+0x40>)
 8003250:	2207      	movs	r2, #7
 8003252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010

08003264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff2d 	bl	80030cc <__NVIC_SetPriorityGrouping>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800328c:	f7ff ff42 	bl	8003114 <__NVIC_GetPriorityGrouping>
 8003290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff90 	bl	80031bc <NVIC_EncodePriority>
 800329c:	4602      	mov	r2, r0
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff5f 	bl	8003168 <__NVIC_SetPriority>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff35 	bl	8003130 <__NVIC_EnableIRQ>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa2 	bl	8003220 <SysTick_Config>
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b08b      	sub	sp, #44	; 0x2c
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fa:	e169      	b.n	80035d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032fc:	2201      	movs	r2, #1
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	429a      	cmp	r2, r3
 8003316:	f040 8158 	bne.w	80035ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a9a      	ldr	r2, [pc, #616]	; (8003588 <HAL_GPIO_Init+0x2a0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d05e      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003324:	4a98      	ldr	r2, [pc, #608]	; (8003588 <HAL_GPIO_Init+0x2a0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d875      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 800332a:	4a98      	ldr	r2, [pc, #608]	; (800358c <HAL_GPIO_Init+0x2a4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d058      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003330:	4a96      	ldr	r2, [pc, #600]	; (800358c <HAL_GPIO_Init+0x2a4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d86f      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 8003336:	4a96      	ldr	r2, [pc, #600]	; (8003590 <HAL_GPIO_Init+0x2a8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d052      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 800333c:	4a94      	ldr	r2, [pc, #592]	; (8003590 <HAL_GPIO_Init+0x2a8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d869      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 8003342:	4a94      	ldr	r2, [pc, #592]	; (8003594 <HAL_GPIO_Init+0x2ac>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04c      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003348:	4a92      	ldr	r2, [pc, #584]	; (8003594 <HAL_GPIO_Init+0x2ac>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d863      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 800334e:	4a92      	ldr	r2, [pc, #584]	; (8003598 <HAL_GPIO_Init+0x2b0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d046      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
 8003354:	4a90      	ldr	r2, [pc, #576]	; (8003598 <HAL_GPIO_Init+0x2b0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d85d      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 800335a:	2b12      	cmp	r3, #18
 800335c:	d82a      	bhi.n	80033b4 <HAL_GPIO_Init+0xcc>
 800335e:	2b12      	cmp	r3, #18
 8003360:	d859      	bhi.n	8003416 <HAL_GPIO_Init+0x12e>
 8003362:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_GPIO_Init+0x80>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	080033e3 	.word	0x080033e3
 800336c:	080033bd 	.word	0x080033bd
 8003370:	080033cf 	.word	0x080033cf
 8003374:	08003411 	.word	0x08003411
 8003378:	08003417 	.word	0x08003417
 800337c:	08003417 	.word	0x08003417
 8003380:	08003417 	.word	0x08003417
 8003384:	08003417 	.word	0x08003417
 8003388:	08003417 	.word	0x08003417
 800338c:	08003417 	.word	0x08003417
 8003390:	08003417 	.word	0x08003417
 8003394:	08003417 	.word	0x08003417
 8003398:	08003417 	.word	0x08003417
 800339c:	08003417 	.word	0x08003417
 80033a0:	08003417 	.word	0x08003417
 80033a4:	08003417 	.word	0x08003417
 80033a8:	08003417 	.word	0x08003417
 80033ac:	080033c5 	.word	0x080033c5
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	4a79      	ldr	r2, [pc, #484]	; (800359c <HAL_GPIO_Init+0x2b4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033ba:	e02c      	b.n	8003416 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	623b      	str	r3, [r7, #32]
          break;
 80033c2:	e029      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	623b      	str	r3, [r7, #32]
          break;
 80033cc:	e024      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	3308      	adds	r3, #8
 80033d4:	623b      	str	r3, [r7, #32]
          break;
 80033d6:	e01f      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	330c      	adds	r3, #12
 80033de:	623b      	str	r3, [r7, #32]
          break;
 80033e0:	e01a      	b.n	8003418 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ea:	2304      	movs	r3, #4
 80033ec:	623b      	str	r3, [r7, #32]
          break;
 80033ee:	e013      	b.n	8003418 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033f8:	2308      	movs	r3, #8
 80033fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	611a      	str	r2, [r3, #16]
          break;
 8003402:	e009      	b.n	8003418 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003404:	2308      	movs	r3, #8
 8003406:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	615a      	str	r2, [r3, #20]
          break;
 800340e:	e003      	b.n	8003418 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003410:	2300      	movs	r3, #0
 8003412:	623b      	str	r3, [r7, #32]
          break;
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x130>
          break;
 8003416:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2bff      	cmp	r3, #255	; 0xff
 800341c:	d801      	bhi.n	8003422 <HAL_GPIO_Init+0x13a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	e001      	b.n	8003426 <HAL_GPIO_Init+0x13e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2bff      	cmp	r3, #255	; 0xff
 800342c:	d802      	bhi.n	8003434 <HAL_GPIO_Init+0x14c>
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	e002      	b.n	800343a <HAL_GPIO_Init+0x152>
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	3b08      	subs	r3, #8
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	210f      	movs	r1, #15
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	6a39      	ldr	r1, [r7, #32]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	431a      	orrs	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80b1 	beq.w	80035ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003468:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <HAL_GPIO_Init+0x2b8>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4a4c      	ldr	r2, [pc, #304]	; (80035a0 <HAL_GPIO_Init+0x2b8>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	4b4a      	ldr	r3, [pc, #296]	; (80035a0 <HAL_GPIO_Init+0x2b8>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003480:	4a48      	ldr	r2, [pc, #288]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4013      	ands	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <HAL_GPIO_Init+0x2c0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_GPIO_Init+0x1ec>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <HAL_GPIO_Init+0x2c4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00d      	beq.n	80034d0 <HAL_GPIO_Init+0x1e8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3e      	ldr	r2, [pc, #248]	; (80035b0 <HAL_GPIO_Init+0x2c8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d007      	beq.n	80034cc <HAL_GPIO_Init+0x1e4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <HAL_GPIO_Init+0x2cc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_GPIO_Init+0x1e0>
 80034c4:	2303      	movs	r3, #3
 80034c6:	e006      	b.n	80034d6 <HAL_GPIO_Init+0x1ee>
 80034c8:	2304      	movs	r3, #4
 80034ca:	e004      	b.n	80034d6 <HAL_GPIO_Init+0x1ee>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e002      	b.n	80034d6 <HAL_GPIO_Init+0x1ee>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_GPIO_Init+0x1ee>
 80034d4:	2300      	movs	r3, #0
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	f002 0203 	and.w	r2, r2, #3
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	4093      	lsls	r3, r2
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034e6:	492f      	ldr	r1, [pc, #188]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3302      	adds	r3, #2
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	492c      	ldr	r1, [pc, #176]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
 800350c:	e006      	b.n	800351c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	43db      	mvns	r3, r3
 8003516:	4928      	ldr	r1, [pc, #160]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003518:	4013      	ands	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	4922      	ldr	r1, [pc, #136]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
 8003534:	e006      	b.n	8003544 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	43db      	mvns	r3, r3
 800353e:	491e      	ldr	r1, [pc, #120]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003540:	4013      	ands	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d006      	beq.n	800355e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4918      	ldr	r1, [pc, #96]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	43db      	mvns	r3, r3
 8003566:	4914      	ldr	r1, [pc, #80]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 8003568:	4013      	ands	r3, r2
 800356a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d021      	beq.n	80035bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_GPIO_Init+0x2d0>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	60cb      	str	r3, [r1, #12]
 8003584:	e021      	b.n	80035ca <HAL_GPIO_Init+0x2e2>
 8003586:	bf00      	nop
 8003588:	10320000 	.word	0x10320000
 800358c:	10310000 	.word	0x10310000
 8003590:	10220000 	.word	0x10220000
 8003594:	10210000 	.word	0x10210000
 8003598:	10120000 	.word	0x10120000
 800359c:	10110000 	.word	0x10110000
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40010800 	.word	0x40010800
 80035ac:	40010c00 	.word	0x40010c00
 80035b0:	40011000 	.word	0x40011000
 80035b4:	40011400 	.word	0x40011400
 80035b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_GPIO_Init+0x304>)
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	4909      	ldr	r1, [pc, #36]	; (80035ec <HAL_GPIO_Init+0x304>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	3301      	adds	r3, #1
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f47f ae8e 	bne.w	80032fc <HAL_GPIO_Init+0x14>
  }
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	372c      	adds	r7, #44	; 0x2c
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40010400 	.word	0x40010400

080035f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
 80035fc:	4613      	mov	r3, r2
 80035fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003600:	787b      	ldrb	r3, [r7, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800360c:	e003      	b.n	8003616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800360e:	887b      	ldrh	r3, [r7, #2]
 8003610:	041a      	lsls	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43d9      	mvns	r1, r3
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	400b      	ands	r3, r1
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e26c      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8087 	beq.w	8003782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003674:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b04      	cmp	r3, #4
 800367e:	d00c      	beq.n	800369a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003680:	4b8f      	ldr	r3, [pc, #572]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d112      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
 800368c:	4b8c      	ldr	r3, [pc, #560]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d10b      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369a:	4b89      	ldr	r3, [pc, #548]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06c      	beq.n	8003780 <HAL_RCC_OscConfig+0x12c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d168      	bne.n	8003780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e246      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x76>
 80036bc:	4b80      	ldr	r3, [pc, #512]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a7f      	ldr	r2, [pc, #508]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e02e      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a7a      	ldr	r2, [pc, #488]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b78      	ldr	r3, [pc, #480]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a77      	ldr	r2, [pc, #476]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e01d      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0xbc>
 80036f6:	4b72      	ldr	r3, [pc, #456]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a71      	ldr	r2, [pc, #452]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b6f      	ldr	r3, [pc, #444]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6e      	ldr	r2, [pc, #440]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0xd4>
 8003710:	4b6b      	ldr	r3, [pc, #428]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a6a      	ldr	r2, [pc, #424]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a67      	ldr	r2, [pc, #412]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003726:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe ff60 	bl	80025f4 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe ff5c 	bl	80025f4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e1fa      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0xe4>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe ff4c 	bl	80025f4 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe ff48 	bl	80025f4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e1e6      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x10c>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d063      	beq.n	8003856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800378e:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800379a:	4b49      	ldr	r3, [pc, #292]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d11c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x18c>
 80037a6:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d116      	bne.n	80037e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_RCC_OscConfig+0x176>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e1ba      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4939      	ldr	r1, [pc, #228]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	e03a      	b.n	8003856 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fe ff01 	bl	80025f4 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f6:	f7fe fefd 	bl	80025f4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e19b      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4927      	ldr	r1, [pc, #156]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
 8003828:	e015      	b.n	8003856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe fee0 	bl	80025f4 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003838:	f7fe fedc 	bl	80025f4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e17a      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d03a      	beq.n	80038d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d019      	beq.n	800389e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003870:	f7fe fec0 	bl	80025f4 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003878:	f7fe febc 	bl	80025f4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e15a      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCC_OscConfig+0x26c>)
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003896:	2001      	movs	r0, #1
 8003898:	f000 faa6 	bl	8003de8 <RCC_Delay>
 800389c:	e01c      	b.n	80038d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a4:	f7fe fea6 	bl	80025f4 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038aa:	e00f      	b.n	80038cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ac:	f7fe fea2 	bl	80025f4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d908      	bls.n	80038cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e140      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	42420000 	.word	0x42420000
 80038c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	4b9e      	ldr	r3, [pc, #632]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e9      	bne.n	80038ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a6 	beq.w	8003a32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4a93      	ldr	r2, [pc, #588]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	61d3      	str	r3, [r2, #28]
 8003902:	4b91      	ldr	r3, [pc, #580]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b8e      	ldr	r3, [pc, #568]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a8a      	ldr	r2, [pc, #552]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe fe63 	bl	80025f4 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fe fe5f 	bl	80025f4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b64      	cmp	r3, #100	; 0x64
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e0fd      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b81      	ldr	r3, [pc, #516]	; (8003b4c <HAL_RCC_OscConfig+0x4f8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x312>
 8003958:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a7a      	ldr	r2, [pc, #488]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	e02d      	b.n	80039c2 <HAL_RCC_OscConfig+0x36e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x334>
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6213      	str	r3, [r2, #32]
 800397a:	4b73      	ldr	r3, [pc, #460]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4a72      	ldr	r2, [pc, #456]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	6213      	str	r3, [r2, #32]
 8003986:	e01c      	b.n	80039c2 <HAL_RCC_OscConfig+0x36e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b05      	cmp	r3, #5
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x356>
 8003990:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a6c      	ldr	r2, [pc, #432]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4a69      	ldr	r2, [pc, #420]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6213      	str	r3, [r2, #32]
 80039a8:	e00b      	b.n	80039c2 <HAL_RCC_OscConfig+0x36e>
 80039aa:	4b67      	ldr	r3, [pc, #412]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a66      	ldr	r2, [pc, #408]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a63      	ldr	r2, [pc, #396]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d015      	beq.n	80039f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ca:	f7fe fe13 	bl	80025f4 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe fe0f 	bl	80025f4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0ab      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	4b57      	ldr	r3, [pc, #348]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ee      	beq.n	80039d2 <HAL_RCC_OscConfig+0x37e>
 80039f4:	e014      	b.n	8003a20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fe fdfd 	bl	80025f4 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fe fdf9 	bl	80025f4 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e095      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a14:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ee      	bne.n	80039fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	4a47      	ldr	r2, [pc, #284]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8081 	beq.w	8003b3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3c:	4b42      	ldr	r3, [pc, #264]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d061      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d146      	bne.n	8003ade <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCC_OscConfig+0x4fc>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe fdcd 	bl	80025f4 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe fdc9 	bl	80025f4 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e067      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a70:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d108      	bne.n	8003a98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a86:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	492d      	ldr	r1, [pc, #180]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a98:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a19      	ldr	r1, [r3, #32]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	4927      	ldr	r1, [pc, #156]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab0:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_OscConfig+0x4fc>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe fd9d 	bl	80025f4 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fe fd99 	bl	80025f4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e037      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x46a>
 8003adc:	e02f      	b.n	8003b3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_RCC_OscConfig+0x4fc>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fd86 	bl	80025f4 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fe fd82 	bl	80025f4 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e020      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x498>
 8003b0a:	e018      	b.n	8003b3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e013      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x4f4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	42420060 	.word	0x42420060

08003b54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0d0      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d910      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b67      	ldr	r3, [pc, #412]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 0207 	bic.w	r2, r3, #7
 8003b7e:	4965      	ldr	r1, [pc, #404]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d040      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d115      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e073      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06b      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c32:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4936      	ldr	r1, [pc, #216]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c44:	f7fe fcd6 	bl	80025f4 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe fcd2 	bl	80025f4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e053      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 020c 	and.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1eb      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d210      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 0207 	bic.w	r2, r3, #7
 8003c8a:	4922      	ldr	r1, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f821 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1cc>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1d0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fc34 	bl	8002570 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40022000 	.word	0x40022000
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	0800568c 	.word	0x0800568c
 8003d20:	20000008 	.word	0x20000008
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	b490      	push	{r4, r7}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d30:	1d3c      	adds	r4, r7, #4
 8003d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d38:	f240 2301 	movw	r3, #513	; 0x201
 8003d3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x40>
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x46>
 8003d66:	e02d      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6a:	623b      	str	r3, [r7, #32]
      break;
 8003d6c:	e02d      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	0c9b      	lsrs	r3, r3, #18
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0c5b      	lsrs	r3, r3, #17
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003da0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da6:	fb02 f203 	mul.w	r2, r2, r3
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	e004      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	623b      	str	r3, [r7, #32]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc6:	623b      	str	r3, [r7, #32]
      break;
 8003dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dca:	6a3b      	ldr	r3, [r7, #32]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc90      	pop	{r4, r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	0800565c 	.word	0x0800565c
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	007a1200 	.word	0x007a1200
 8003de4:	003d0900 	.word	0x003d0900

08003de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <RCC_Delay+0x34>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <RCC_Delay+0x38>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	0a5b      	lsrs	r3, r3, #9
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e04:	bf00      	nop
  }
  while (Delay --);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	60fa      	str	r2, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f9      	bne.n	8003e04 <RCC_Delay+0x1c>
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	20000008 	.word	0x20000008
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e041      	b.n	8003eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fe fa22 	bl	8002294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f000 fe12 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e03a      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_TIM_Base_Start_IT+0x98>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x58>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d009      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x58>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x58>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d111      	bne.n	8003f40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d010      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	e007      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800

08003f68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e041      	b.n	8003ffe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f839 	bl	8004006 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f000 fd70 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_TIM_PWM_Start+0x24>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e022      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d109      	bne.n	8004056 <HAL_TIM_PWM_Start+0x3e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e015      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d109      	bne.n	8004070 <HAL_TIM_PWM_Start+0x58>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e008      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e05e      	b.n	8004148 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Start+0x82>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	e013      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Start+0x92>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Start+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	e003      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	6839      	ldr	r1, [r7, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f86b 	bl	80051a6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_TIM_PWM_Start+0x138>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <HAL_TIM_PWM_Start+0x138>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_TIM_PWM_Start+0xfa>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d009      	beq.n	8004112 <HAL_TIM_PWM_Start+0xfa>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a14      	ldr	r2, [pc, #80]	; (8004154 <HAL_TIM_PWM_Start+0x13c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIM_PWM_Start+0xfa>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <HAL_TIM_PWM_Start+0x140>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b06      	cmp	r3, #6
 8004122:	d010      	beq.n	8004146 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	e007      	b.n	8004146 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800

0800415c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e041      	b.n	80041f2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f839 	bl	80041fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 fc76 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d104      	bne.n	8004226 <HAL_TIM_IC_Start_IT+0x1a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e013      	b.n	800424e <HAL_TIM_IC_Start_IT+0x42>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d104      	bne.n	8004236 <HAL_TIM_IC_Start_IT+0x2a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004232:	b2db      	uxtb	r3, r3
 8004234:	e00b      	b.n	800424e <HAL_TIM_IC_Start_IT+0x42>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d104      	bne.n	8004246 <HAL_TIM_IC_Start_IT+0x3a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e003      	b.n	800424e <HAL_TIM_IC_Start_IT+0x42>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <HAL_TIM_IC_Start_IT+0x54>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e013      	b.n	8004288 <HAL_TIM_IC_Start_IT+0x7c>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b04      	cmp	r3, #4
 8004264:	d104      	bne.n	8004270 <HAL_TIM_IC_Start_IT+0x64>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e00b      	b.n	8004288 <HAL_TIM_IC_Start_IT+0x7c>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d104      	bne.n	8004280 <HAL_TIM_IC_Start_IT+0x74>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e003      	b.n	8004288 <HAL_TIM_IC_Start_IT+0x7c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004286:	b2db      	uxtb	r3, r3
 8004288:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d102      	bne.n	8004296 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004290:	7bbb      	ldrb	r3, [r7, #14]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d001      	beq.n	800429a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0b3      	b.n	8004402 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0x9e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a8:	e013      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0xc6>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_IC_Start_IT+0xae>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b8:	e00b      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0xc6>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d104      	bne.n	80042ca <HAL_TIM_IC_Start_IT+0xbe>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c8:	e003      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0xc6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_IC_Start_IT+0xd6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e0:	e013      	b.n	800430a <HAL_TIM_IC_Start_IT+0xfe>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_IC_Start_IT+0xe6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f0:	e00b      	b.n	800430a <HAL_TIM_IC_Start_IT+0xfe>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_IC_Start_IT+0xf6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004300:	e003      	b.n	800430a <HAL_TIM_IC_Start_IT+0xfe>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d841      	bhi.n	8004394 <HAL_TIM_IC_Start_IT+0x188>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <HAL_TIM_IC_Start_IT+0x10c>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800434d 	.word	0x0800434d
 800431c:	08004395 	.word	0x08004395
 8004320:	08004395 	.word	0x08004395
 8004324:	08004395 	.word	0x08004395
 8004328:	0800435f 	.word	0x0800435f
 800432c:	08004395 	.word	0x08004395
 8004330:	08004395 	.word	0x08004395
 8004334:	08004395 	.word	0x08004395
 8004338:	08004371 	.word	0x08004371
 800433c:	08004395 	.word	0x08004395
 8004340:	08004395 	.word	0x08004395
 8004344:	08004395 	.word	0x08004395
 8004348:	08004383 	.word	0x08004383
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0202 	orr.w	r2, r2, #2
 800435a:	60da      	str	r2, [r3, #12]
      break;
 800435c:	e01b      	b.n	8004396 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0204 	orr.w	r2, r2, #4
 800436c:	60da      	str	r2, [r3, #12]
      break;
 800436e:	e012      	b.n	8004396 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0208 	orr.w	r2, r2, #8
 800437e:	60da      	str	r2, [r3, #12]
      break;
 8004380:	e009      	b.n	8004396 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0210 	orr.w	r2, r2, #16
 8004390:	60da      	str	r2, [r3, #12]
      break;
 8004392:	e000      	b.n	8004396 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004394:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 ff01 	bl	80051a6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a18      	ldr	r2, [pc, #96]	; (800440c <HAL_TIM_IC_Start_IT+0x200>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_TIM_IC_Start_IT+0x1c0>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d009      	beq.n	80043cc <HAL_TIM_IC_Start_IT+0x1c0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a14      	ldr	r2, [pc, #80]	; (8004410 <HAL_TIM_IC_Start_IT+0x204>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_TIM_IC_Start_IT+0x1c0>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_TIM_IC_Start_IT+0x208>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d111      	bne.n	80043f0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d010      	beq.n	8004400 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	e007      	b.n	8004400 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800

08004418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0202 	mvn.w	r2, #2
 8004444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd f9d0 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 faf6 	bl	8004a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fafc 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0204 	mvn.w	r2, #4
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd f9a6 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 facc 	bl	8004a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fad2 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d122      	bne.n	800451c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0208 	mvn.w	r2, #8
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2204      	movs	r2, #4
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd f97c 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 faa2 	bl	8004a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 faa8 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b10      	cmp	r3, #16
 8004528:	d122      	bne.n	8004570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0210 	mvn.w	r2, #16
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2208      	movs	r2, #8
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd f952 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa78 	bl	8004a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa7e 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10e      	bne.n	800459c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0201 	mvn.w	r2, #1
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd f928 	bl	80017ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fecc 	bl	8005360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa42 	bl	8004a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d107      	bne.n	8004620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0220 	mvn.w	r2, #32
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fe97 	bl	800534e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_TIM_IC_ConfigChannel+0x1a>
 800463e:	2302      	movs	r3, #2
 8004640:	e082      	b.n	8004748 <HAL_TIM_IC_ConfigChannel+0x120>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d11b      	bne.n	8004688 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	6819      	ldr	r1, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 fbfe 	bl	8004e60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 020c 	bic.w	r2, r2, #12
 8004672:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6999      	ldr	r1, [r3, #24]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	619a      	str	r2, [r3, #24]
 8004686:	e05a      	b.n	800473e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d11c      	bne.n	80046c8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f000 fc67 	bl	8004f70 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6999      	ldr	r1, [r3, #24]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	021a      	lsls	r2, r3, #8
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	619a      	str	r2, [r3, #24]
 80046c6:	e03a      	b.n	800473e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d11b      	bne.n	8004706 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f000 fcb2 	bl	8005046 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 020c 	bic.w	r2, r2, #12
 80046f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69d9      	ldr	r1, [r3, #28]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	61da      	str	r2, [r3, #28]
 8004704:	e01b      	b.n	800473e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f000 fcd1 	bl	80050bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004728:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69d9      	ldr	r1, [r3, #28]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	021a      	lsls	r2, r3, #8
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004766:	2302      	movs	r3, #2
 8004768:	e0ac      	b.n	80048c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	f200 809f 	bhi.w	80048b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080048b9 	.word	0x080048b9
 8004788:	080048b9 	.word	0x080048b9
 800478c:	080048b9 	.word	0x080048b9
 8004790:	080047f5 	.word	0x080047f5
 8004794:	080048b9 	.word	0x080048b9
 8004798:	080048b9 	.word	0x080048b9
 800479c:	080048b9 	.word	0x080048b9
 80047a0:	08004837 	.word	0x08004837
 80047a4:	080048b9 	.word	0x080048b9
 80047a8:	080048b9 	.word	0x080048b9
 80047ac:	080048b9 	.word	0x080048b9
 80047b0:	08004877 	.word	0x08004877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f9c8 	bl	8004b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0208 	orr.w	r2, r2, #8
 80047ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0204 	bic.w	r2, r2, #4
 80047de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6999      	ldr	r1, [r3, #24]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	619a      	str	r2, [r3, #24]
      break;
 80047f2:	e062      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fa0e 	bl	8004c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	021a      	lsls	r2, r3, #8
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	619a      	str	r2, [r3, #24]
      break;
 8004834:	e041      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fa57 	bl	8004cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0208 	orr.w	r2, r2, #8
 8004850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0204 	bic.w	r2, r2, #4
 8004860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69d9      	ldr	r1, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	61da      	str	r2, [r3, #28]
      break;
 8004874:	e021      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 faa1 	bl	8004dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	61da      	str	r2, [r3, #28]
      break;
 80048b6:	e000      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80048b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_TIM_ConfigClockSource+0x18>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e0b3      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x180>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800490a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	d03e      	beq.n	800499c <HAL_TIM_ConfigClockSource+0xd0>
 800491e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004922:	f200 8087 	bhi.w	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	f000 8085 	beq.w	8004a38 <HAL_TIM_ConfigClockSource+0x16c>
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004932:	d87f      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 8004934:	2b70      	cmp	r3, #112	; 0x70
 8004936:	d01a      	beq.n	800496e <HAL_TIM_ConfigClockSource+0xa2>
 8004938:	2b70      	cmp	r3, #112	; 0x70
 800493a:	d87b      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 800493c:	2b60      	cmp	r3, #96	; 0x60
 800493e:	d050      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x116>
 8004940:	2b60      	cmp	r3, #96	; 0x60
 8004942:	d877      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 8004944:	2b50      	cmp	r3, #80	; 0x50
 8004946:	d03c      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0xf6>
 8004948:	2b50      	cmp	r3, #80	; 0x50
 800494a:	d873      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d058      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x136>
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d86f      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d064      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x156>
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d86b      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 800495c:	2b20      	cmp	r3, #32
 800495e:	d060      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x156>
 8004960:	2b20      	cmp	r3, #32
 8004962:	d867      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05c      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x156>
 8004968:	2b10      	cmp	r3, #16
 800496a:	d05a      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800496c:	e062      	b.n	8004a34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6899      	ldr	r1, [r3, #8]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f000 fbf3 	bl	8005168 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004990:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	609a      	str	r2, [r3, #8]
      break;
 800499a:	e04e      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6899      	ldr	r1, [r3, #8]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f000 fbdc 	bl	8005168 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049be:	609a      	str	r2, [r3, #8]
      break;
 80049c0:	e03b      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f000 faa0 	bl	8004f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2150      	movs	r1, #80	; 0x50
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fbaa 	bl	8005134 <TIM_ITRx_SetConfig>
      break;
 80049e0:	e02b      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f000 fafa 	bl	8004fe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2160      	movs	r1, #96	; 0x60
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fb9a 	bl	8005134 <TIM_ITRx_SetConfig>
      break;
 8004a00:	e01b      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f000 fa80 	bl	8004f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2140      	movs	r1, #64	; 0x40
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fb8a 	bl	8005134 <TIM_ITRx_SetConfig>
      break;
 8004a20:	e00b      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	f000 fb81 	bl	8005134 <TIM_ITRx_SetConfig>
        break;
 8004a32:	e002      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a34:	bf00      	nop
 8004a36:	e000      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
	...

08004a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <TIM_Base_SetConfig+0xb8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_Base_SetConfig+0x30>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d007      	beq.n	8004abc <TIM_Base_SetConfig+0x30>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <TIM_Base_SetConfig+0xbc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_Base_SetConfig+0x30>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <TIM_Base_SetConfig+0xc0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d108      	bne.n	8004ace <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <TIM_Base_SetConfig+0xb8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <TIM_Base_SetConfig+0x62>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004adc:	d007      	beq.n	8004aee <TIM_Base_SetConfig+0x62>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <TIM_Base_SetConfig+0xbc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_Base_SetConfig+0x62>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <TIM_Base_SetConfig+0xc0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d108      	bne.n	8004b00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <TIM_Base_SetConfig+0xb8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d103      	bne.n	8004b34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	615a      	str	r2, [r3, #20]
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800

08004b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0303 	bic.w	r3, r3, #3
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 0302 	bic.w	r3, r3, #2
 8004b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <TIM_OC1_SetConfig+0xc8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d10c      	bne.n	8004bc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0308 	bic.w	r3, r3, #8
 8004bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f023 0304 	bic.w	r3, r3, #4
 8004bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <TIM_OC1_SetConfig+0xc8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d111      	bne.n	8004bf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	621a      	str	r2, [r3, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00

08004c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0210 	bic.w	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0320 	bic.w	r3, r3, #32
 8004c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <TIM_OC2_SetConfig+0xd0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d10d      	bne.n	8004c98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a14      	ldr	r2, [pc, #80]	; (8004cec <TIM_OC2_SetConfig+0xd0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d113      	bne.n	8004cc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	40012c00 	.word	0x40012c00

08004cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <TIM_OC3_SetConfig+0xd0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10d      	bne.n	8004d6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a14      	ldr	r2, [pc, #80]	; (8004dc0 <TIM_OC3_SetConfig+0xd0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d113      	bne.n	8004d9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	621a      	str	r2, [r3, #32]
}
 8004db4:	bf00      	nop
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40012c00 	.word	0x40012c00

08004dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <TIM_OC4_SetConfig+0x98>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d109      	bne.n	8004e38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	40012c00 	.word	0x40012c00

08004e60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <TIM_TI1_SetConfig+0xa8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00b      	beq.n	8004ea6 <TIM_TI1_SetConfig+0x46>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e94:	d007      	beq.n	8004ea6 <TIM_TI1_SetConfig+0x46>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a1c      	ldr	r2, [pc, #112]	; (8004f0c <TIM_TI1_SetConfig+0xac>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_TI1_SetConfig+0x46>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <TIM_TI1_SetConfig+0xb0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <TIM_TI1_SetConfig+0x4a>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <TIM_TI1_SetConfig+0x4c>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e003      	b.n	8004eca <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f023 030a 	bic.w	r3, r3, #10
 8004ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f003 030a 	and.w	r3, r3, #10
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800

08004f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 030a 	bic.w	r3, r3, #10
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	031b      	lsls	r3, r3, #12
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 0210 	bic.w	r2, r3, #16
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005012:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	031b      	lsls	r3, r3, #12
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0303 	bic.w	r3, r3, #3
 8005072:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005082:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	b2db      	uxtb	r3, r3
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005096:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	031b      	lsls	r3, r3, #12
 8005100:	b29b      	uxth	r3, r3
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	031b      	lsls	r3, r3, #12
 8005114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	f043 0307 	orr.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	609a      	str	r2, [r3, #8]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	431a      	orrs	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr

080051a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b087      	sub	sp, #28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	2201      	movs	r2, #1
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	401a      	ands	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	431a      	orrs	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]
}
 80051e4:	bf00      	nop
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
	...

080051f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005204:	2302      	movs	r3, #2
 8005206:	e046      	b.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d009      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10c      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800

080052ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e03d      	b.n	8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <_ZdlPvj>:
 8005372:	f000 b800 	b.w	8005376 <_ZdlPv>

08005376 <_ZdlPv>:
 8005376:	f000 b825 	b.w	80053c4 <free>
	...

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	2600      	movs	r6, #0
 8005380:	4d0c      	ldr	r5, [pc, #48]	; (80053b4 <__libc_init_array+0x38>)
 8005382:	4c0d      	ldr	r4, [pc, #52]	; (80053b8 <__libc_init_array+0x3c>)
 8005384:	1b64      	subs	r4, r4, r5
 8005386:	10a4      	asrs	r4, r4, #2
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	f000 f892 	bl	80054b4 <_init>
 8005390:	2600      	movs	r6, #0
 8005392:	4d0a      	ldr	r5, [pc, #40]	; (80053bc <__libc_init_array+0x40>)
 8005394:	4c0a      	ldr	r4, [pc, #40]	; (80053c0 <__libc_init_array+0x44>)
 8005396:	1b64      	subs	r4, r4, r5
 8005398:	10a4      	asrs	r4, r4, #2
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	0800569c 	.word	0x0800569c
 80053b8:	0800569c 	.word	0x0800569c
 80053bc:	0800569c 	.word	0x0800569c
 80053c0:	080056a4 	.word	0x080056a4

080053c4 <free>:
 80053c4:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <free+0xc>)
 80053c6:	4601      	mov	r1, r0
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	f000 b819 	b.w	8005400 <_free_r>
 80053ce:	bf00      	nop
 80053d0:	20000014 	.word	0x20000014

080053d4 <memcpy>:
 80053d4:	440a      	add	r2, r1
 80053d6:	4291      	cmp	r1, r2
 80053d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053dc:	d100      	bne.n	80053e0 <memcpy+0xc>
 80053de:	4770      	bx	lr
 80053e0:	b510      	push	{r4, lr}
 80053e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ec:	d1f9      	bne.n	80053e2 <memcpy+0xe>
 80053ee:	bd10      	pop	{r4, pc}

080053f0 <memset>:
 80053f0:	4603      	mov	r3, r0
 80053f2:	4402      	add	r2, r0
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d100      	bne.n	80053fa <memset+0xa>
 80053f8:	4770      	bx	lr
 80053fa:	f803 1b01 	strb.w	r1, [r3], #1
 80053fe:	e7f9      	b.n	80053f4 <memset+0x4>

08005400 <_free_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4605      	mov	r5, r0
 8005404:	2900      	cmp	r1, #0
 8005406:	d043      	beq.n	8005490 <_free_r+0x90>
 8005408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540c:	1f0c      	subs	r4, r1, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	bfb8      	it	lt
 8005412:	18e4      	addlt	r4, r4, r3
 8005414:	f000 f840 	bl	8005498 <__malloc_lock>
 8005418:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <_free_r+0x94>)
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	4610      	mov	r0, r2
 800541e:	b933      	cbnz	r3, 800542e <_free_r+0x2e>
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6014      	str	r4, [r2, #0]
 8005424:	4628      	mov	r0, r5
 8005426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800542a:	f000 b83b 	b.w	80054a4 <__malloc_unlock>
 800542e:	42a3      	cmp	r3, r4
 8005430:	d90a      	bls.n	8005448 <_free_r+0x48>
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	1862      	adds	r2, r4, r1
 8005436:	4293      	cmp	r3, r2
 8005438:	bf01      	itttt	eq
 800543a:	681a      	ldreq	r2, [r3, #0]
 800543c:	685b      	ldreq	r3, [r3, #4]
 800543e:	1852      	addeq	r2, r2, r1
 8005440:	6022      	streq	r2, [r4, #0]
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	6004      	str	r4, [r0, #0]
 8005446:	e7ed      	b.n	8005424 <_free_r+0x24>
 8005448:	461a      	mov	r2, r3
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	b10b      	cbz	r3, 8005452 <_free_r+0x52>
 800544e:	42a3      	cmp	r3, r4
 8005450:	d9fa      	bls.n	8005448 <_free_r+0x48>
 8005452:	6811      	ldr	r1, [r2, #0]
 8005454:	1850      	adds	r0, r2, r1
 8005456:	42a0      	cmp	r0, r4
 8005458:	d10b      	bne.n	8005472 <_free_r+0x72>
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	4401      	add	r1, r0
 800545e:	1850      	adds	r0, r2, r1
 8005460:	4283      	cmp	r3, r0
 8005462:	6011      	str	r1, [r2, #0]
 8005464:	d1de      	bne.n	8005424 <_free_r+0x24>
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4401      	add	r1, r0
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	6053      	str	r3, [r2, #4]
 8005470:	e7d8      	b.n	8005424 <_free_r+0x24>
 8005472:	d902      	bls.n	800547a <_free_r+0x7a>
 8005474:	230c      	movs	r3, #12
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	e7d4      	b.n	8005424 <_free_r+0x24>
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	1821      	adds	r1, r4, r0
 800547e:	428b      	cmp	r3, r1
 8005480:	bf01      	itttt	eq
 8005482:	6819      	ldreq	r1, [r3, #0]
 8005484:	685b      	ldreq	r3, [r3, #4]
 8005486:	1809      	addeq	r1, r1, r0
 8005488:	6021      	streq	r1, [r4, #0]
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6054      	str	r4, [r2, #4]
 800548e:	e7c9      	b.n	8005424 <_free_r+0x24>
 8005490:	bd38      	pop	{r3, r4, r5, pc}
 8005492:	bf00      	nop
 8005494:	20000134 	.word	0x20000134

08005498 <__malloc_lock>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__malloc_lock+0x8>)
 800549a:	f000 b809 	b.w	80054b0 <__retarget_lock_acquire_recursive>
 800549e:	bf00      	nop
 80054a0:	2000029c 	.word	0x2000029c

080054a4 <__malloc_unlock>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__malloc_unlock+0x8>)
 80054a6:	f000 b804 	b.w	80054b2 <__retarget_lock_release_recursive>
 80054aa:	bf00      	nop
 80054ac:	2000029c 	.word	0x2000029c

080054b0 <__retarget_lock_acquire_recursive>:
 80054b0:	4770      	bx	lr

080054b2 <__retarget_lock_release_recursive>:
 80054b2:	4770      	bx	lr

080054b4 <_init>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr

080054c0 <_fini>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr
